-- MySQL Script generated by MySQL Workbench
-- Sat Jan 29 00:06:33 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Account_`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Account_` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Account_` (
  `AccountID` INT NOT NULL,
  `FirstName` NVARCHAR(45) NOT NULL,
  `LastName` NVARCHAR(45) NOT NULL,
  `DateCreate` DATETIME NOT NULL,
  `Photo` BLOB NOT NULL,
  `PassHash` INT NOT NULL,
  `Email` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`AccountID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Address` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Address` (
  `AddressID` INT NOT NULL,
  `City` NVARCHAR(45) NOT NULL,
  `Street` NVARCHAR(45) NOT NULL,
  `Floor` INT NULL,
  `BuildingNumber` NVARCHAR(11) NOT NULL,
  PRIMARY KEY (`AddressID`),
  UNIQUE INDEX `AddressID_UNIQUE` (`AddressID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Admin`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Admin` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Admin` (
  `AccountID` INT NOT NULL,
  `AccessLimit` SMALLINT NOT NULL,
  PRIMARY KEY (`AccountID`),
  CONSTRAINT `fk_Admin_AccountID`
    FOREIGN KEY (`AccountID`)
    REFERENCES `mydb`.`Account_` (`AccountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Att_Numerical`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Att_Numerical` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Att_Numerical` (
  `AttributeID` INT NOT NULL,
  `Start` DECIMAL NOT NULL,
  `Finish` DECIMAL NOT NULL,
  PRIMARY KEY (`AttributeID`),
  CONSTRAINT `fk_Att_Numerical_AttributeID`
    FOREIGN KEY (`AttributeID`)
    REFERENCES `mydb`.`Attribute` (`AttributeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Att_Qualitative`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Att_Qualitative` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Att_Qualitative` (
  `AttributeID` INT NOT NULL,
  PRIMARY KEY (`AttributeID`),
  CONSTRAINT `fk_Att_Qualitative_AttributeID`
    FOREIGN KEY (`AttributeID`)
    REFERENCES `mydb`.`Attribute` (`AttributeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Attribute`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Attribute` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Attribute` (
  `AttributeID` INT NOT NULL,
  `Name` NVARCHAR(45) NOT NULL,
  `DateCreate` DATETIME NOT NULL,
  PRIMARY KEY (`AttributeID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Att_String`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Att_String` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Att_String` (
  `AttributeID` INT NOT NULL,
  PRIMARY KEY (`AttributeID`),
  CONSTRAINT `fk_Att_String_AttributeID`
    FOREIGN KEY (`AttributeID`)
    REFERENCES `mydb`.`Attribute` (`AttributeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`CanStore`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`CanStore` ;

CREATE TABLE IF NOT EXISTS `mydb`.`CanStore` (
  `StorageID` INT NOT NULL,
  `SubCategoryID` INT NOT NULL,
  PRIMARY KEY (`StorageID`, `SubCategoryID`),
  INDEX `fk_CanStore_SubCategoryID_idx` (`SubCategoryID` ASC) VISIBLE,
  CONSTRAINT `fk_CanStore_StorageID`
    FOREIGN KEY (`StorageID`)
    REFERENCES `mydb`.`Storage` (`StorageID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CanStore_SubCategoryID`
    FOREIGN KEY (`SubCategoryID`)
    REFERENCES `mydb`.`SubCategory` (`CategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Cart`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Cart` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Cart` (
  `CustomerID` INT NOT NULL,
  `DateLastEdit` DATETIME NOT NULL,
  PRIMARY KEY (`CustomerID`),
  CONSTRAINT `fk_Cart_CustomerID`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `mydb`.`Customer` (`AccountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`CartContainsProduct`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`CartContainsProduct` ;

CREATE TABLE IF NOT EXISTS `mydb`.`CartContainsProduct` (
  `CartID` INT NOT NULL,
  `ProductID` INT NOT NULL,
  `Quantity` INT UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (`CartID`, `ProductID`),
  INDEX `fk_CartContainsProduct_ProductID_idx` (`ProductID` ASC) VISIBLE,
  CONSTRAINT `fk_CartContainsProduct_CartID`
    FOREIGN KEY (`CartID`)
    REFERENCES `mydb`.`Cart` (`CustomerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CartContainsProduct_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `mydb`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Category` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Category` (
  `CategoryID` INT NOT NULL,
  `Name` NVARCHAR(45) NOT NULL,
  `Description` NVARCHAR(256) NOT NULL,
  `DateCreate` DATETIME NOT NULL,
  PRIMARY KEY (`CategoryID`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`CategoryHasAtt`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`CategoryHasAtt` ;

CREATE TABLE IF NOT EXISTS `mydb`.`CategoryHasAtt` (
  `AttributeID` INT NOT NULL,
  `CategoryID` INT NOT NULL,
  PRIMARY KEY (`AttributeID`, `CategoryID`),
  INDEX `fk_CategoryHasAtt_CategoryID_idx` (`CategoryID` ASC) VISIBLE,
  CONSTRAINT `fk_CategoryHasAtt_AttributeID`
    FOREIGN KEY (`AttributeID`)
    REFERENCES `mydb`.`Attribute` (`AttributeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CategoryHasAtt_CategoryID`
    FOREIGN KEY (`CategoryID`)
    REFERENCES `mydb`.`Category` (`CategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Customer` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Customer` (
  `AccountID` INT NOT NULL,
  PRIMARY KEY (`AccountID`),
  CONSTRAINT `fk_Customer_AccountID`
    FOREIGN KEY (`AccountID`)
    REFERENCES `mydb`.`Account_` (`AccountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`CustomerHasAddress`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`CustomerHasAddress` ;

CREATE TABLE IF NOT EXISTS `mydb`.`CustomerHasAddress` (
  `CustomerID` INT NOT NULL,
  `AddressID` INT NOT NULL,
  PRIMARY KEY (`CustomerID`, `AddressID`),
  INDEX `fk_CustomerHasAddress_AddressID_idx` (`AddressID` ASC) VISIBLE,
  CONSTRAINT `fk_CustomerHasAddress_CustomerID`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `mydb`.`Customer` (`AccountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CustomerHasAddress_AddressID`
    FOREIGN KEY (`AddressID`)
    REFERENCES `mydb`.`Address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Delivery`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Delivery` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Delivery` (
  `DeliveryID` INT NOT NULL,
  `CompanyName` VARCHAR(45) NOT NULL,
  `DateAdded` DATETIME NOT NULL,
  `VehicleTypeID` INT NULL,
  PRIMARY KEY (`DeliveryID`),
  UNIQUE INDEX `DeliveryID_UNIQUE` (`DeliveryID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`DiscountCode`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`DiscountCode` ;

CREATE TABLE IF NOT EXISTS `mydb`.`DiscountCode` (
  `DiscountID` INT NOT NULL,
  `Code_` VARCHAR(45) NOT NULL,
  `DateCreate` DATETIME NOT NULL,
  `DateEnd` DATETIME NOT NULL,
  `MaxDisAmount` INT NOT NULL,
  `MaxDisPercent` INT NOT NULL,
  `MaxUsage` INT NOT NULL,
  `CurrentUsageCount` INT GENERATED ALWAYS AS () VIRTUAL,
  `AdminID` INT NOT NULL,
  PRIMARY KEY (`DiscountID`),
  INDEX `fk_DiscountCode_AdminID_idx` (`AdminID` ASC) VISIBLE,
  CONSTRAINT `fk_DiscountCode_AdminID`
    FOREIGN KEY (`AdminID`)
    REFERENCES `mydb`.`Admin` (`AccountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Order_`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Order_` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Order_` (
  `OrderID` INT NOT NULL,
  `IsComplete` TINYINT NOT NULL,
  `DateCreate` DATETIME NOT NULL,
  `CurrentState` INT NOT NULL,
  `FullDeliveryFee` INT GENERATED ALWAYS AS (),
  `AddressID` INT NOT NULL,
  `CustomerID` INT NOT NULL,
  `DiscountCodeID` INT NOT NULL,
  PRIMARY KEY (`OrderID`),
  INDEX `fk_Order_AddressID_idx` (`AddressID` ASC) VISIBLE,
  INDEX `fk_Order_CustomerID_idx` (`CustomerID` ASC) VISIBLE,
  INDEX `fk_Order_DiscountCodeID_idx` (`DiscountCodeID` ASC) VISIBLE,
  CONSTRAINT `fk_Order_AddressID`
    FOREIGN KEY (`AddressID`)
    REFERENCES `mydb`.`Address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_CustomerID`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `mydb`.`Customer` (`AccountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_DiscountCodeID`
    FOREIGN KEY (`DiscountCodeID`)
    REFERENCES `mydb`.`DiscountCode` (`DiscountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`PaymentMethod`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`PaymentMethod` ;

CREATE TABLE IF NOT EXISTS `mydb`.`PaymentMethod` (
  `PaymentMethodID` INT NOT NULL,
  `Name` VARCHAR(45) NOT NULL,
  `Address` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`PaymentMethodID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Picture`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Picture` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Picture` (
  `ProductID` INT NOT NULL,
  `ID` INT NOT NULL,
  `PictureValue` BLOB NOT NULL,
  PRIMARY KEY (`ProductID`, `ID`),
  CONSTRAINT `ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `mydb`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Product` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Product` (
  `ProductID` INT NOT NULL,
  `Name` NVARCHAR(45) NOT NULL,
  `Price` INT NOT NULL,
  `Brand` NVARCHAR(45) NOT NULL,
  `Description` NVARCHAR(100) NULL,
  `DateCreate` DATETIME NOT NULL,
  `TotalPurchases` INT GENERATED ALWAYS AS () VIRTUAL,
  `Quantity` INT GENERATED ALWAYS AS () VIRTUAL,
  `CategoryID` INT NOT NULL,
  `SubCategoryID` INT NOT NULL,
  PRIMARY KEY (`ProductID`),
  UNIQUE INDEX `ProductID_UNIQUE` (`ProductID` ASC) VISIBLE,
  INDEX `fk_Product_SubCategoryID_idx` (`CategoryID` ASC, `SubCategoryID` ASC) VISIBLE,
  CONSTRAINT `fk_Product_SubCategoryID`
    FOREIGN KEY (`CategoryID` , `SubCategoryID`)
    REFERENCES `mydb`.`SubCategory` (`CategoryID` , `SubCategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`ProductHasAtt`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`ProductHasAtt` ;

CREATE TABLE IF NOT EXISTS `mydb`.`ProductHasAtt` (
  `AttributeID` INT NOT NULL,
  `ProductID` INT NOT NULL,
  PRIMARY KEY (`AttributeID`, `ProductID`),
  INDEX `fk_ProductHasAtt_ProductID_idx` (`ProductID` ASC) VISIBLE,
  CONSTRAINT `fk_ProductHasAtt_AttributeID`
    FOREIGN KEY (`AttributeID`)
    REFERENCES `mydb`.`Attribute` (`AttributeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProductHasAtt_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `mydb`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`PurchaseAmount`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`PurchaseAmount` ;

CREATE TABLE IF NOT EXISTS `mydb`.`PurchaseAmount` (
  `ProductID` INT NOT NULL,
  `PusrchaseAmountValue` INT NOT NULL,
  PRIMARY KEY (`ProductID`),
  CONSTRAINT `ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `mydb`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Quality`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Quality` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Quality` (
  `AttQualitativeID` INT NOT NULL,
  `ID` INT NOT NULL,
  `Name` NVARCHAR(45) NOT NULL,
  PRIMARY KEY (`AttQualitativeID`, `ID`),
  CONSTRAINT `fk_Quality_Att_QualitativeID`
    FOREIGN KEY (`AttQualitativeID`)
    REFERENCES `mydb`.`Att_Qualitative` (`AttributeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Review`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Review` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Review` (
  `ProductID` INT NOT NULL,
  `CustomerID` INT NOT NULL,
  `Date` DATETIME NOT NULL,
  `Comment` NVARCHAR(100) NULL,
  `Rate` INT NULL,
  PRIMARY KEY (`ProductID`, `CustomerID`),
  INDEX `fk_Review_CustomerID_idx` (`CustomerID` ASC) VISIBLE,
  CONSTRAINT `fk_Review_CustomerID`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `mydb`.`Customer` (`AccountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Review_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `mydb`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Storage`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Storage` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Storage` (
  `StorageID` INT NOT NULL,
  `DateAddition` DATETIME NOT NULL,
  `AddressID` INT NOT NULL,
  PRIMARY KEY (`StorageID`),
  UNIQUE INDEX `StorageID_UNIQUE` (`StorageID` ASC) VISIBLE,
  INDEX `fk_Storage_AddressID_idx` (`AddressID` ASC) VISIBLE,
  CONSTRAINT `fk_Storage_AddressID`
    FOREIGN KEY (`AddressID`)
    REFERENCES `mydb`.`Address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Stores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Stores` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Stores` (
  `StorageID` INT NOT NULL,
  `ProductID` INT NOT NULL,
  `Quantity` INT NOT NULL,
  PRIMARY KEY (`StorageID`, `ProductID`),
  INDEX `fk_Stores_ProductID_idx` (`ProductID` ASC) VISIBLE,
  CONSTRAINT `fk_Stores_ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `mydb`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Stores_StorageID`
    FOREIGN KEY (`StorageID`)
    REFERENCES `mydb`.`Storage` (`StorageID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`SubCategory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SubCategory` ;

CREATE TABLE IF NOT EXISTS `mydb`.`SubCategory` (
  `CategoryID` INT NOT NULL,
  `SubCategoryID` INT NOT NULL,
  `Name` NVARCHAR(45) NOT NULL,
  `Description` NVARCHAR(256) NOT NULL,
  `DateCreate` DATETIME NOT NULL,
  PRIMARY KEY (`CategoryID`, `SubCategoryID`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC) VISIBLE,
  CONSTRAINT `fk_SubCategory_CateegoryID`
    FOREIGN KEY (`CategoryID`)
    REFERENCES `mydb`.`Category` (`CategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`SubCategoryHasAtt`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SubCategoryHasAtt` ;

CREATE TABLE IF NOT EXISTS `mydb`.`SubCategoryHasAtt` (
  `AttributeID` INT NOT NULL,
  `CategoryID` INT NOT NULL,
  `SubCategoryID` INT NOT NULL,
  PRIMARY KEY (`AttributeID`, `SubCategoryID`, `CategoryID`),
  INDEX `fk_SubCategoryHasAtt_SubCategoryID_idx` (`CategoryID` ASC, `SubCategoryID` ASC) VISIBLE,
  CONSTRAINT `fk_SubCategoryHasAtt_AttributeID`
    FOREIGN KEY (`AttributeID`)
    REFERENCES `mydb`.`Attribute` (`AttributeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SubCategoryHasAtt_SubCategoryID`
    FOREIGN KEY (`CategoryID` , `SubCategoryID`)
    REFERENCES `mydb`.`SubCategory` (`CategoryID` , `SubCategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`SubOrder`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SubOrder` ;

CREATE TABLE IF NOT EXISTS `mydb`.`SubOrder` (
  `OrderID` INT NOT NULL,
  `SubOrderID` INT NOT NULL,
  `CurrentState` INT UNSIGNED NOT NULL,
  `DateDelivery` DATETIME NOT NULL,
  `DateCreate` DATETIME NOT NULL,
  `DateLastEdit` DATETIME NOT NULL,
  `StorageID` INT NOT NULL,
  `AddressID` INT NOT NULL,
  PRIMARY KEY (`OrderID`, `SubOrderID`),
  INDEX `fk_SubOrder_StorageID_idx` (`StorageID` ASC) VISIBLE,
  INDEX `fk_SubOrder_AddressID_idx` (`AddressID` ASC) VISIBLE,
  CONSTRAINT `fk_SubOrder_OrderID`
    FOREIGN KEY (`OrderID`)
    REFERENCES `mydb`.`Order_` (`OrderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SubOrder_StorageID`
    FOREIGN KEY (`StorageID`)
    REFERENCES `mydb`.`Storage` (`StorageID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SubOrder_AddressID`
    FOREIGN KEY (`AddressID`)
    REFERENCES `mydb`.`Address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`SubOrderHasProduct`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SubOrderHasProduct` ;

CREATE TABLE IF NOT EXISTS `mydb`.`SubOrderHasProduct` (
  `ProductID` INT NOT NULL,
  `SubOrderID` INT NOT NULL,
  `Quantity` INT UNSIGNED NULL,
  PRIMARY KEY (`ProductID`, `SubOrderID`),
  INDEX `SubOrderId_idx` (`SubOrderID` ASC) VISIBLE,
  CONSTRAINT `ProductId`
    FOREIGN KEY (`ProductID`)
    REFERENCES `mydb`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `SubOrderId`
    FOREIGN KEY (`SubOrderID`)
    REFERENCES `mydb`.`SubOrder` (`SubOrderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Transaction_`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Transaction_` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Transaction_` (
  `TransactionID` INT NOT NULL,
  `Value_` INT NOT NULL DEFAULT 0,
  `CurrentState` INT NOT NULL,
  `Date` DATETIME NOT NULL,
  `AccountID` INT NOT NULL,
  `PaymentMethodID` INT NOT NULL,
  PRIMARY KEY (`TransactionID`),
  INDEX `fk_Transaction_AccountID_idx` (`AccountID` ASC) VISIBLE,
  INDEX `fk_Transaction_PaymentMethodID_idx` (`PaymentMethodID` ASC) VISIBLE,
  CONSTRAINT `fk_Transaction_AccountID0`
    FOREIGN KEY (`AccountID`)
    REFERENCES `mydb`.`Account_` (`AccountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Transaction_PaymentMethodID0`
    FOREIGN KEY (`PaymentMethodID`)
    REFERENCES `mydb`.`PaymentMethod` (`PaymentMethodID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Transfer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Transfer` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Transfer` (
  `TransferID` INT NOT NULL,
  `Fee` INT UNSIGNED NOT NULL DEFAULT 0,
  `Date` DATETIME NOT NULL,
  `DeliveryID` INT NOT NULL,
  `FromStorageID` INT NOT NULL,
  `ToAddressID` INT NOT NULL,
  `OrderID` INT NULL,
  `SubOrderID` INT NULL,
  PRIMARY KEY (`TransferID`),
  INDEX `fk_Transfer_DeliveryID_idx` (`DeliveryID` ASC) VISIBLE,
  INDEX `fk_Transfer_AddressID_idx` (`ToAddressID` ASC) VISIBLE,
  INDEX `fk_Transfer_StorageID_idx` (`FromStorageID` ASC) VISIBLE,
  INDEX `fk_Transfer_OrderID_idx` (`OrderID` ASC) VISIBLE,
  INDEX `fk_Transfer_SubOrderID_idx` (`SubOrderID` ASC) VISIBLE,
  CONSTRAINT `fk_Transfer_DeliveryID`
    FOREIGN KEY (`DeliveryID`)
    REFERENCES `mydb`.`Delivery` (`DeliveryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Transfer_AddressID`
    FOREIGN KEY (`ToAddressID`)
    REFERENCES `mydb`.`Address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Transfer_StorageID`
    FOREIGN KEY (`FromStorageID`)
    REFERENCES `mydb`.`Storage` (`StorageID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Transfer_OrderID`
    FOREIGN KEY (`OrderID`)
    REFERENCES `mydb`.`Order_` (`OrderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Transfer_SubOrderID`
    FOREIGN KEY (`SubOrderID`)
    REFERENCES `mydb`.`SubOrder` (`SubOrderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Uses`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Uses` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Uses` (
  `CustomerID` INT NOT NULL,
  `DiscountCodeID` INT NOT NULL,
  PRIMARY KEY (`CustomerID`, `DiscountCodeID`),
  INDEX `fk_Uses_DiscountCodeID_idx` (`DiscountCodeID` ASC) VISIBLE,
  CONSTRAINT `fk_Uses_CustomerID`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `mydb`.`Customer` (`AccountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Uses_DiscountCodeID`
    FOREIGN KEY (`DiscountCodeID`)
    REFERENCES `mydb`.`DiscountCode` (`DiscountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`VehicleType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`VehicleType` ;

CREATE TABLE IF NOT EXISTS `mydb`.`VehicleType` (
  `DeliveryID` INT NOT NULL,
  `VehicleTypeValue` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`DeliveryID`, `VehicleTypeValue`),
  CONSTRAINT `DeliveryID`
    FOREIGN KEY (`DeliveryID`)
    REFERENCES `mydb`.`Delivery` (`DeliveryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Video`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Video` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Video` (
  `ProductID` INT NOT NULL,
  `ID` INT NOT NULL,
  `VideoValue` BLOB NOT NULL,
  PRIMARY KEY (`ProductID`, `ID`),
  CONSTRAINT `ProductID`
    FOREIGN KEY (`ProductID`)
    REFERENCES `mydb`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`WorksOrManages`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`WorksOrManages` ;

CREATE TABLE IF NOT EXISTS `mydb`.`WorksOrManages` (
  `StorageID` INT NOT NULL,
  `AdminID` INT NOT NULL,
  PRIMARY KEY (`StorageID`, `AdminID`),
  INDEX `fk_WorksOrManages_AdminID_idx` (`AdminID` ASC) VISIBLE,
  CONSTRAINT `fk_WorksOrManages_StorageID`
    FOREIGN KEY (`StorageID`)
    REFERENCES `mydb`.`Storage` (`StorageID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_WorksOrManages_AdminID`
    FOREIGN KEY (`AdminID`)
    REFERENCES `mydb`.`Admin` (`AccountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`AccountInfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`AccountInfo` (`AccountId` INT, `FirstName` INT, `LastName` INT, `DateCreate` INT, `Email` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`CartSummary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`CartSummary` (`CostumerID` INT, `DateLastEdit` INT, `Price` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`AccountOrderSummary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`AccountOrderSummary` (`AccountID` INT, `Paid` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`AccountBalance`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`AccountBalance` (`AccountID` INT, `Balance` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`OrderSummaryByProduct`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`OrderSummaryByProduct` (`OrderID` INT, `ProductID` INT, `DiscountCodeID` INT, `Quantity` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`OrderSummary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`OrderSummary` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`OrderTransfers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`OrderTransfers` (`TransferID` INT, `CustomerID` INT, `Fee` INT, `Date` INT, `DeliveryID` INT, `FromStorageID` INT, `TOAddressID` INT, `OrderID` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`SubOrderTransfers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SubOrderTransfers` (`TransferID` INT, `StorageID` INT, `Fee` INT, `Date` INT, `DeliveryID` INT, `FromStorageID` INT, `TOAddressID` INT, `SubOrderID` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`AccountTransactionSummary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`AccountTransactionSummary` (`AccountID` INT, `Value_` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`CustomerDiscount`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`CustomerDiscount` (`CustomerID` INT, `DiscountID` INT, `Code_` INT, `DateCreate` INT, `DateEnd` INT, `MaxDisAmount` INT, `MaxDisPercent` INT, `MaxUsage` INT, `CurrentUsageCount` INT, `RemainingUsage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`ProductRate`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`ProductRate` (`ProductID` INT, `AVG(Rate)` INT);

-- -----------------------------------------------------
-- View `mydb`.`AccountInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`AccountInfo`;
DROP VIEW IF EXISTS `mydb`.`AccountInfo` ;
USE `mydb`;
CREATE  OR REPLACE VIEW `AccountInfo` AS SELECT AccountId, FirstName, LastName, DateCreate, Email FROM Account;

-- -----------------------------------------------------
-- View `mydb`.`CartSummary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`CartSummary`;
DROP VIEW IF EXISTS `mydb`.`CartSummary` ;
USE `mydb`;
CREATE  OR REPLACE VIEW `CartSummary` AS SELECT Cart.CostumerID, Cart.DateLastEdit, SUM(Product.Price * CartContainsProduct.Quantity) AS Price
FROM 
Cart JOIN CartContainsProduct ON Cart.CostumerID = CartContainsProduct.CartID 
JOIN Product ON Product.ProductID = CartContainsProduct.ProductID
GROUP BY Cart.CartID;

-- -----------------------------------------------------
-- View `mydb`.`AccountOrderSummary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`AccountOrderSummary`;
DROP VIEW IF EXISTS `mydb`.`AccountOrderSummary` ;
USE `mydb`;
CREATE  OR REPLACE VIEW `AccountOrderSummary` AS SELECT Account_.AccountID, SUM(OrderSummary.Price) AS Paid
FROM Account_ JOIN OrderSummary ON Account_.AccountID = OrderSummary.AccountID
GROUP BY OrderSummary.AccountID;

-- -----------------------------------------------------
-- View `mydb`.`AccountBalance`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`AccountBalance`;
DROP VIEW IF EXISTS `mydb`.`AccountBalance` ;
USE `mydb`;
CREATE  OR REPLACE VIEW `AccountBalance` AS SELECT AccountID, Value_ - Paid AS Balance
FROM Account_ JOIN AccountTransactionSummary ON Account_.AccountID = AccountTransactionSummary.AccountID
JOIN AccountOrderSummary ON Account_.AccountID = AccountOrderSummary.AccountID;

-- -----------------------------------------------------
-- View `mydb`.`OrderSummaryByProduct`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`OrderSummaryByProduct`;
DROP VIEW IF EXISTS `mydb`.`OrderSummaryByProduct` ;
USE `mydb`;
CREATE  OR REPLACE VIEW `OrderSummaryByProduct` AS SELECT Order_.OrderID, SubOrderHasProduct.ProductID, Order_.DiscountCodeID, SUM(SubOrderHasProduct.Quantity) AS Quantity
FROM Order_ JOIN SubOrder ON Order_.OrderID = SubOrder.OrderID
JOIN SubOrderHasProduct ON SubOrderHasProduct.SubOrderID = SubOrder.SubOrderID
GROUP BY SubOrderHasProduct.ProductID;

-- -----------------------------------------------------
-- View `mydb`.`OrderSummary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`OrderSummary`;
DROP VIEW IF EXISTS `mydb`.`OrderSummary` ;
USE `mydb`;
CREATE  OR REPLACE VIEW `OrderSummary` AS SELECT OrderSummaryByProduct, (SELECT MAX(Price_)
	FROM (VALUES 
    ROW(SUM(Product.Price * OrderSummaryByProduct.Quantity) * DiscountCode.MaxDisPercent),
    ROW(SUM(Product.Price * OrderSummaryByProduct.Quantity) - DiscountCode.MaxDisAmount)) AS AllPrices(Price_))
    AS Price

FROM OrderSummaryByProduct JOIN Product ON Product.ProductID = OrderSummaryByProduct.ProductID
RIGHT JOIN DiscountCode ON DiscountCode.DiscountID = OrderSummaryByProduct.DiscountCodeID
GROUP BY OrderSummaryByProduct.OrderID;

-- -----------------------------------------------------
-- View `mydb`.`OrderTransfers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`OrderTransfers`;
DROP VIEW IF EXISTS `mydb`.`OrderTransfers` ;
USE `mydb`;
CREATE  OR REPLACE VIEW `OrderTransfers` AS SELECT Transfer.TransferID, CustomerID, Fee, Date, DeliveryID, FromStorageID, TOAddressID, OrderID
FROM Transfer JOIN Order_ ON Transfer.OrderID = Order_.OrderID;

-- -----------------------------------------------------
-- View `mydb`.`SubOrderTransfers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SubOrderTransfers`;
DROP VIEW IF EXISTS `mydb`.`SubOrderTransfers` ;
USE `mydb`;
CREATE  OR REPLACE VIEW `SubOrderTransfers` AS SELECT Transfer.TransferID, StorageID, Fee, Date, DeliveryID, FromStorageID, TOAddressID, SubOrder.SubOrderID
FROM Transfer JOIN SubOrder ON Transfer.SubOrderID = SubOrder.SubOrderID;

-- -----------------------------------------------------
-- View `mydb`.`AccountTransactionSummary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`AccountTransactionSummary`;
DROP VIEW IF EXISTS `mydb`.`AccountTransactionSummary` ;
USE `mydb`;
CREATE  OR REPLACE VIEW `AccountTransactionSummary` AS SELECT Account_.AccountID, SUM(Transaction_.Value_) AS Value_
FROM Account_ JOIN Transaction_ ON Transaction_.AccountID = Account_.AccountID
GROUP BY Transaction_.AccountID;

-- -----------------------------------------------------
-- View `mydb`.`CustomerDiscount`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`CustomerDiscount`;
DROP VIEW IF EXISTS `mydb`.`CustomerDiscount` ;
USE `mydb`;
CREATE  OR REPLACE VIEW `CustomerDiscount` AS SELECT CustomerID, DiscountID, Code_, DateCreate, DateEnd, MaxDisAmount, MaxDisPercent,
MaxUsage, CurrentUsageCount, MaxUsage - CurrentUsageCount AS RemainingUsage
FROM DiscountCode JOIN Uses ON DiscountCode.DiscountID = Uses.DiscountCodeID;

-- -----------------------------------------------------
-- View `mydb`.`ProductRate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`ProductRate`;
DROP VIEW IF EXISTS `mydb`.`ProductRate` ;
USE `mydb`;
CREATE  OR REPLACE VIEW `ProductRate` AS SELECT ProductID, AVG(Rate)
FROM Product JOIN Review ON Product.ProductID = Review.ProductID
GROUP BY ProductID;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
